#!/usr/bin/perl

use warnings;
use strict;

use ExtUtils::Miniperl  ();
use List::Util          qw/max/;

sub perlmain {
    open my $MAIN, ">", \my $C;
    my $OLD = select $MAIN;
    ExtUtils::Miniperl::writemain;
    select $OLD;
    close $MAIN;
    return $C;
}

sub Cqq (_) {
    my $_ = shift;
    s/\\/\\\\/g;
    s/"/\\"/g;
    s/\n/\\n/g;
    s/\0/\\0/g;
    s/([^[:print:]])/sprintf "\\%03o", ord $1/ge;
    $_;
}

sub str_to_C (_) {
    return 
        join "",
        map qq/\n"$_"/,
        map Cqq,
        map { unpack "(a70)*" }
        split /(?<=[\n\0])/,
        $_[0];
}

my @argv        = (@ARGV, "--");
my $argc        = @argv + 1;
my $argv_buf    = str_to_C join "", map "$_\0", @argv;
my $argv_init   = "";
my $ptr         = 0;
my $C           = perlmain;

for (1..@argv) {
    $argv_init .= "my_argv[$_] = my_argv_buf + $ptr;\n";
    $ptr += 1 + length $argv[$_ - 1];
}

$ptr++;

for ($C) {
    s{\*my_perl;\K}{
        static char my_argv_buf[$ptr] = $argv_buf;
    };
    s{\sexitstatus;\K}{
        static int my_argc;
        char *my_argv[$argc + argc];
    };
    s{; \K ( [^;]* perl_parse\( [^)]* ,\s+) argc,\s+ argv,\s+}{
        my_argv[0] = argv[0];
        $argv_init

        /* argv has an extra "\\0" on the end, so we can go all 
           the way up to argv[argc] */

        for (my_argc = 0; my_argc < argc; my_argc++) {
            my_argv[my_argc + $argc] = argv[my_argc + 1];
        }
        my_argc += $argc - 1;

        $1 my_argc, my_argv,
    }x;
}

print $C;
